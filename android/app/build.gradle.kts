import com.github.gradle.node.npm.task.NpmTask

plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
    id("com.github.node-gradle.node") version "7.0.2"
}

android {
    namespace = "com.github.nini22p.vvr"
    compileSdk = 34

    defaultConfig {
        applicationId = "com.github.nini22p.vvr"
        minSdk = 24
        targetSdk = 34
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        compose = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion = "1.5.1"
    }
    packaging {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
}

dependencies {

    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.activity.compose)
    implementation(platform(libs.androidx.compose.bom))
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(libs.androidx.ui.tooling.preview)
    implementation(libs.androidx.material3)
    implementation(libs.androidx.webkit)
    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.junit)
    androidTestImplementation(libs.androidx.espresso.core)
    androidTestImplementation(platform(libs.androidx.compose.bom))
    androidTestImplementation(libs.androidx.ui.test.junit4)
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
}

/**
 * Node plugin configuration
 * https://github.com/node-gradle/gradle-node-plugin/blob/master/docs/usage.md#configuring-the-plugin
 */
node {
    // The Node.js project directory location
    // This is where the package.json file and node_modules directory are located
    nodeProjectDir.set(file("../.."))
}

/**
 * This task builds the vite project at ../.. folder.
 */
val buildWeb = tasks.register<NpmTask>("buildWeb") {
    description = "Runs vite build"
    args.set(listOf("run", "build"))
    doFirst {
        println("Executing `npm run build` in ../..")
    }
    dependsOn("npmInstall")
}

/**
 * Removes the assets generated by the `buildWeb` task.
 */
val cleanWeb = tasks.register<Delete>("cleanWeb") {
    description = "Removes web assets generated by vite"
    delete(file("../../dist"))
}

/**
 * This task cleans the Android assets folder.
 * This is necessary because the Android build process does not clean the assets folder.
 */
val cleanAssets = tasks.register<Delete>("cleanAssets") {
    description = "Removes web assets from app module"
    delete(file("src/main/assets/dist"))
}

/**
 * This task copies the vite project at `../../web/dist` folder to the Android assets folder.
 */
val copyDistToAssets = tasks.register<Copy>("copyDistToAssets") {
    description = "Copies web assets into app module"
    from(file("../../dist"))
    into(file("src/main/assets/dist"))
    dependsOn(buildWeb)
    dependsOn(cleanAssets)
}

/**
 * Hooks tasks into running as part of the app module build.
 */
tasks.named("preBuild") {
    dependsOn(copyDistToAssets)
}

/**
 * Includes tasks when running a project clean.
 */
tasks.named("clean") {
    dependsOn(cleanWeb)
    dependsOn(cleanAssets)
}